'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

exports.default = botimize;

var _request = require('request');

var _request2 = _interopRequireDefault(_request);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var API_URL = 'https://api.botimize.io';

function makeRequest(options, cb) {
  // send request to api server
  try {
    (0, _request2.default)(options, function (err, res, body) {
      if (err) {
        return cb && cb(err);
      }
      if (body && body.error) {
        return cb && cb(body.error.message);
      }
      cb && cb(null, body);
    });
  } catch (err) {
    console.log(err);
  }
}

var BotimizeCore = function () {
  /*
   * constructor
   *
   *  @param apiKey the access token for sending events to botimize api server.
   */
  function BotimizeCore(apiKey, platform, options) {
    _classCallCheck(this, BotimizeCore);

    if (!apiKey) {
      throw new Error('No API key provided');
    }
    if (platform !== 'facebook') {
      throw new Error('Specified platform is not supported: ' + platform);
    }
    this.apiKey = apiKey;
    this.platform = platform;
    this.apiUrl = options.apiUrl || API_URL;
    this.debug = options.debug || false;
    // super properties
    this.superProperties = {
      platform: platform,
      tag: 'unknown'
    };
  }

  /*
   * track
   *  track event
   *
   *  @param event the event name.
   *  @param properties the event properties.
   */


  _createClass(BotimizeCore, [{
    key: 'track',
    value: function track(event, properties) {
      var _props = JSON.parse(JSON.stringify(properties));

      var options = {
        method: 'POST',
        uri: this.apiUrl + '/messages',
        qs: {
          apikey: this.apiKey
        },
        json: true,
        body: {
          tag: this.superProperties.tag,
          platform: this.platform,
          direction: event,
          raw: _props
        }
      };
      makeRequest(options, function (error) {
        if (error) {
          console.log('failed to send track event to botimize server.');
          console.log(error);
        }
      });
    }
  }, {
    key: 'logIncoming',
    value: function logIncoming(data) {
      var source = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'npm';

      var prefix = '[botimize][' + this.platform + '][incoming][' + source + ']';
      if (this.debug) {
        console.log(prefix + ': ' + JSON.stringify(data, null, 2));
      }
      this.track('incoming', data);
    }
  }, {
    key: 'logOutgoing',
    value: function logOutgoing(data) {
      var source = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'npm';

      var prefix = '[botimize][' + this.platform + '][outgoing][' + source + ']';
      if (this.platform === 'facebook' && source === 'npm') {
        var newData = data.json;
        newData.access_token = data.qs.access_token;
        if (this.debug) {
          console.log(prefix + ': ' + JSON.stringify(newData, null, 2));
        }
        this.track('outgoing', newData);
      } else {
        if (this.debug) {
          console.log(prefix + ': ' + JSON.stringify(data, null, 2));
        }
        this.track('outgoing', data);
      }
    }

    /*
     *  notify
     *      send a notification event.
     */

  }, {
    key: 'notify',
    value: function notify(data) {
      var via = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'email';

      var options = {
        method: 'POST',
        uri: this.apiUrl + '/projects/notify',
        qs: {
          apikey: this.apiKey,
          via: via
        },
        json: true,
        body: data
      };
      makeRequest(options, function (error) {
        if (error) {
          console.log('failed to send notification to botimize server.');
          console.log(error);
        }
      });
    }
  }]);

  return BotimizeCore;
}();

function botimize(apiKey, platform) {
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

  return new BotimizeCore(apiKey, platform, options);
}
module.exports = exports['default'];